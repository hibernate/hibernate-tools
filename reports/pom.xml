<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2016 - 2024 Red Hat, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" basis,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.hibernate.tool</groupId>
        <artifactId>hibernate-tools-parent</artifactId>
        <version>6.6.12.Final</version>
    </parent>
    <artifactId>hibernate-tools-reports</artifactId>

    <name>Hibernate Tools Reports</name>
    <description>Hibernate Tools build reports</description>
    <packaging>pom</packaging>

    <dependencies>
        <dependency>
            <groupId>org.hibernate.tool</groupId>
            <artifactId>hibernate-tools-utils</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.tool</groupId>
            <artifactId>hibernate-tools-orm</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.tool</groupId>
            <artifactId>hibernate-tools-orm-jbt</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.tool</groupId>
            <artifactId>hibernate-tools-maven</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.tool</groupId>
            <artifactId>hibernate-tools-gradle</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.tool</groupId>
            <artifactId>hibernate-tools-ant</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
                Hack to deploy in the "reports" module without deploying the "reports" module itself.
                The default lifecycle bindings of the plugin is to "stage locally" every artifact throughout
                the maven execution, and only actually deploy the "locally staged" artifacts
                in the very last executed module, which happens to be this "reports" module.
                However, this "reports" module does not generate any artifact we want to deploy.
                Thus, we'd like to prevent even its POM from being deployed: just deploy the "locally staged" artifacts,
                without adding the POM from the "reports" module to these artifacts.
                The default lifecycle bindings of the plugin does not offer a configuration option to do that,
                so we have to explicitly bind it
             -->
            <plugin>
                <groupId>org.sonatype.plugins</groupId>
                <artifactId>nexus-staging-maven-plugin</artifactId>
                <extensions>false</extensions>
                <!-- The <configuration> element is inherited from the parent module. -->
                <executions>
                    <!-- Skip the default deployment, as explained above we don't want it. -->
                    <execution>
                        <id>default-deploy</id>
                        <phase>none</phase>
                    </execution>
                    <!-- ... but execute the deferred deployment for the other modules -->
                    <execution>
                        <id>deferred-deploy</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>deploy-staged</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
