plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
}

group = 'org.hibernate.tool'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
     mavenCentral()
     mavenLocal()
}

dependencies {

    implementation "org.hibernate.tool:hibernate-tools-orm:$version"

    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

rootProject.ext.set("gradle.publish.key", System.env.PLUGIN_PORTAL_USERNAME)
rootProject.ext.set("gradle.publish.secret", System.env.PLUGIN_PORTAL_PASSWORD)

gradlePlugin {
    website = 'https://github.com/hibernate/hibernate-tools/tree/main/gradle/plugin'
    vcsUrl = 'https://github.com/hibernate/hibernate-tools/tree/main/gradle/plugin'
    plugins {
        hibernate {
            id = 'org.hibernate.tool.hibernate-tools-gradle'
            implementationClass = 'org.hibernate.tool.gradle.Plugin'
            displayName = 'Hibernate Tools Gradle Plugin'
            description = 'Gradle plugin to provide hibernate-tools reverse engineering and code/schema generation abilities.'
            tags = ['hibernate','tools','reverse engineering','reveng','generation']
        }
    }
}

sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    useJUnitPlatform()
}
