package org.hibernate.tool.proxies;

/**
 * This bean demonstrates the equals method generated by hbm2java after the change to the
 * equals implementation. Hbm2java previously used instanceof to check the class of the 
 * 'other' parameter, but this doesn't work correctly in the presence of the proxies that 
 * Hibernate uses when lazy loading. Therefore the new implementation uses {@link org.hibernate.Hibernate#getClass(Object)}
 * to correctly resolve the class in the presence of proxies, and casts to the proxy to avoid
 * {@link ClassCastException} as the proxy cannot be cast to the concrete class.
 * @author karlvr
 *
 */
public class EqualBean2 implements EqualBean2Proxy {

	private int id;
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	/**
	 * The equals implementation now generated by hbm2java. See the legacy implementation
	 * in {@link EqualBean#equals(Object)}.
	 */
	public boolean equals(Object other) {
        if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !org.hibernate.Hibernate.getClass(other).equals(getClass()) ) return false;
		 EqualBean2Proxy castOther = ( EqualBean2Proxy ) other; 
        
		 return (this.getId()==castOther.getId());
  }
  
  public int hashCode() {
        int result = 17;
        
        result = 37 * result + (int) this.getId();
        
        
        
        
        
        
        
        return result;
  }  
}
